diff -Naur bluez.orig/audio/manager.c bluez/audio/manager.c
--- bluez.orig/audio/manager.c	2013-10-07 12:40:30.435161127 +0300
+++ bluez/audio/manager.c	2013-10-07 13:26:13.715067473 +0300
@@ -156,6 +156,42 @@
 	g_strfreev(list);
 }
 
+static enum batt_info_source telephony_battery_info_source(GKeyFile *config,
+							void **param)
+{
+	enum batt_info_source batt = BATT_INFO_DEFAULT;
+	GError *err = NULL;
+	char *s;
+
+	s = g_key_file_get_string(config, "Telephony", "BatteryInfo", &err);
+	if (err) {
+		DBG("audio.conf: %s", err->message);
+		g_error_free(err);
+	} else {
+		if (strcmp(s, "Hal") == 0) {
+			batt = BATT_INFO_HAL;
+			*param = NULL;
+		} else if (strcmp(s, "Statefs") == 0) {
+			char *p;
+			batt = BATT_INFO_STATEFS;
+			p = g_key_file_get_string(config, "Telephony",
+						"BatteryInfoPath", &err);
+			if (err) {
+				DBG("audio.conf: %s", err->message);
+				g_error_free(err);
+				*param = g_strdup(BATT_INFO_STATEFS_DEFAULT_PATH);
+			} else {
+				*param = p;
+			}
+		} else {
+			DBG("audio.conf: ignoring unknown BatteryInfo '%s'", s);
+		}
+		g_free(s);
+	}
+
+	return batt;
+}
+
 static struct audio_adapter *find_adapter(GSList *list,
 					struct btd_adapter *btd_adapter)
 {
@@ -915,11 +951,17 @@
 
 	if (powered) {
 		uint32_t disabled_features;
+		enum batt_info_source batt;
+		void *batt_param = NULL;
+
 		/* telephony driver already initialized*/
 		if (telephony == TRUE)
 			return;
 		setup_telephony_ag_features(config, &disabled_features);
-		telephony_init(disabled_features);
+		batt = telephony_battery_info_source(config, &batt_param);
+		telephony_init(disabled_features, batt, batt_param);
+		if (batt_param != NULL)
+			g_free(batt_param);
 		telephony = TRUE;
 		return;
 	}
diff -Naur bluez.orig/audio/telephony-dummy.c bluez/audio/telephony-dummy.c
--- bluez.orig/audio/telephony-dummy.c	2013-10-07 12:40:30.435161127 +0300
+++ bluez/audio/telephony-dummy.c	2013-10-07 13:26:58.299065951 +0300
@@ -409,7 +409,8 @@
 	{ }
 };
 
-int telephony_init(uint32_t disabled_features)
+int telephony_init(uint32_t disabled_features, enum batt_info_source batt,
+		void *batt_param)
 {
 	uint32_t features = AG_FEATURE_REJECT_A_CALL |
 				AG_FEATURE_ENHANCED_CALL_STATUS |
@@ -419,6 +420,9 @@
 
 	features &= ~disabled_features;
 
+	if (batt != BATT_INFO_DEFAULT)
+		DBG("Ignoring non-default battery info source. ");
+
 	connection = dbus_bus_get(DBUS_BUS_SYSTEM, NULL);
 
 	if (g_dbus_register_interface(connection, TELEPHONY_DUMMY_PATH,
diff -Naur bluez.orig/audio/telephony.h bluez/audio/telephony.h
--- bluez.orig/audio/telephony.h	2013-10-07 12:40:30.435161127 +0300
+++ bluez/audio/telephony.h	2013-10-07 13:26:44.147066434 +0300
@@ -141,6 +141,16 @@
 	gboolean ignore_redundant;
 };
 
+/* Where to retrieve battery charge information */
+enum batt_info_source {
+	BATT_INFO_DEFAULT, /* default choice for implementation */
+	BATT_INFO_HAL,
+	BATT_INFO_STATEFS
+};
+
+#define BATT_INFO_STATEFS_DEFAULT_PATH \
+	"/run/state/providers/upower/Battery/ChargePercentage"
+
 /* Notify telephony-*.c of connected/disconnected devices. Implemented by
  * telephony-*.c
  */
@@ -240,5 +250,6 @@
 	return -ENOENT;
 }
 
-int telephony_init(uint32_t disabled_features);
+int telephony_init(uint32_t disabled_features, enum batt_info_source batt_info,
+		void *batt_info_param);
 void telephony_exit(void);
diff -Naur bluez.orig/audio/telephony-maemo5.c bluez/audio/telephony-maemo5.c
--- bluez.orig/audio/telephony-maemo5.c	2013-10-07 12:40:30.435161127 +0300
+++ bluez/audio/telephony-maemo5.c	2013-10-07 13:27:10.347065540 +0300
@@ -2029,7 +2029,8 @@
 	return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
 }
 
-int telephony_init(uint32_t disabled_features)
+int telephony_init(uint32_t disabled_features, enum batt_info_source batt,
+		void *batt_param)
 {
 	const char *battery_cap = "battery";
 	uint32_t features = AG_FEATURE_EC_ANDOR_NR |
@@ -2042,6 +2043,9 @@
 
 	features &= ~disabled_features;
 
+	if (batt != BATT_INFO_DEFAULT)
+		DBG("Ignoring non-default battery info source. ");
+
 	connection = dbus_bus_get(DBUS_BUS_SYSTEM, NULL);
 
 	if (!dbus_connection_add_filter(connection, signal_filter,
diff -Naur bluez.orig/audio/telephony-maemo6.c bluez/audio/telephony-maemo6.c
--- bluez.orig/audio/telephony-maemo6.c	2013-10-07 12:40:30.435161127 +0300
+++ bluez/audio/telephony-maemo6.c	2013-10-07 13:27:21.915065145 +0300
@@ -2115,7 +2115,8 @@
 	remove_pending(call);
 }
 
-int telephony_init(uint32_t disabled_features)
+int telephony_init(uint32_t disabled_features, enum batt_info_source batt,
+		void *batt_param)
 {
 	const char *battery_cap = "battery";
 	uint32_t features = AG_FEATURE_EC_ANDOR_NR |
@@ -2131,6 +2132,9 @@
 
 	features &= ~disabled_features;
 
+	if (batt != BATT_INFO_DEFAULT)
+		DBG("Ignoring non-default battery info source. ");
+
 	connection = dbus_bus_get(DBUS_BUS_SYSTEM, NULL);
 
 	add_watch(NULL, NULL, CSD_CALL_INTERFACE, NULL);
diff -Naur bluez.orig/audio/telephony-ofono.c bluez/audio/telephony-ofono.c
--- bluez.orig/audio/telephony-ofono.c	2013-10-07 12:40:30.435161127 +0300
+++ bluez/audio/telephony-ofono.c	2013-10-07 16:50:59.926618928 +0300
@@ -90,6 +90,9 @@
 
 static gboolean events_enabled = FALSE;
 
+static char *statefs_batt_path = NULL;
+static guint statefs_batt_watch = 0;
+
 static struct indicator ofono_indicators[] =
 {
 	{ "battchg",	"0-5",	5,	TRUE },
@@ -1343,6 +1346,40 @@
 	return TRUE;
 }
 
+static gboolean statefs_batt_update(gpointer data)
+{
+	gboolean ret = FALSE;
+	gchar *buf = NULL;
+	gchar *endp = NULL;
+	gsize len = 0;
+	GError *err = NULL;
+	guint64 val;
+
+	if (statefs_batt_path == NULL)
+		goto done;
+
+	DBG("Reading battery charge from '%s'.", statefs_batt_path);
+	if (g_file_get_contents(statefs_batt_path, &buf, &len, &err) == FALSE) {
+		DBG("Failed to read battery charge: %s", err->message);
+		goto done;
+	}
+
+	val = g_ascii_strtoull(buf, &endp, 10);
+	if (endp == NULL || *endp != '\0') {
+		DBG("Cannot process battery charge string '%s'", buf);
+		goto done;
+	}
+
+	DBG("Battery charge changed to %llu", val);
+	val = 5*val/100;
+	telephony_update_indicator(ofono_indicators, "battchg", val);
+	ret = TRUE;
+
+done:
+	g_free(buf);
+	return ret;
+}
+
 static void hal_battery_level_reply(DBusPendingCall *call, void *user_data)
 {
 	DBusMessage *reply;
@@ -1544,7 +1581,19 @@
 		modem_removed(modem_obj_path);
 }
 
-int telephony_init(uint32_t disabled_features)
+static int statefs_batt_init(const char *path)
+{
+	statefs_batt_path = g_strdup(path);
+	statefs_batt_watch =
+		g_timeout_add_seconds(60, statefs_batt_update, NULL);
+	statefs_batt_update(NULL);
+
+	DBG("Statefs battery info source set up. ");
+	return 0;
+}
+
+int telephony_init(uint32_t disabled_features, enum batt_info_source batt,
+		void *batt_param)
 {
 	uint32_t features = AG_FEATURE_EC_ANDOR_NR |
 				AG_FEATURE_INBAND_RINGTONE |
@@ -1583,13 +1632,25 @@
 
 	watches = g_slist_prepend(watches, GUINT_TO_POINTER(watch));
 
-	ret = send_method_call("org.freedesktop.Hal",
+	switch (batt) {
+
+	case BATT_INFO_STATEFS:
+		ret = statefs_batt_init(batt_param);
+		break;
+
+	case BATT_INFO_HAL:
+	default:
+		ret = send_method_call("org.freedesktop.Hal",
 				"/org/freedesktop/Hal/Manager",
 				"org.freedesktop.Hal.Manager",
 				"FindDeviceByCapability",
 				hal_find_device_reply, NULL,
 				DBUS_TYPE_STRING, &battery_cap,
 				DBUS_TYPE_INVALID);
+		break;
+
+	}
+
 	if (ret < 0)
 		return ret;
 
@@ -1635,5 +1696,15 @@
 	dbus_connection_unref(connection);
 	connection = NULL;
 
+	if (statefs_batt_watch != 0) {
+		g_source_remove(statefs_batt_watch);
+		statefs_batt_watch = 0;
+	}
+
+	if (statefs_batt_path != NULL) {
+		g_free(statefs_batt_path);
+		statefs_batt_path = NULL;
+	}
+
 	telephony_deinit();
 }
